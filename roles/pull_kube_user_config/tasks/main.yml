- name: Load k3s config
  delegate_to: localhost
  azure.azcollection.azure_rm_aks_info:
    name: "{{ azure_resource_group }}"
    resource_group: "{{ azure_resource_group }}"
    show_kubeconfig: admin
  register: k8s_config_raw

- name: Parse k3s config
  set_fact:
    k8s_config: "{{ k8s_config_raw.aks[0].kube_config | from_yaml }}"

- name: Get token secret
  delegate_to: localhost
  k8s_info:
    kubeconfig: "{{ k8s_admin_config_path }}"
    kind: Secret
    name: "{{ k8s_namespace }}-token"
    namespace: "{{ k8s_namespace }}"
  register: token_secret

- name: Create ansible config folder
  delegate_to: localhost
  file:
    path: "{{ k8s_user_config_path | dirname }}"
    state: directory
    mode: 0700

- name: Create ansible config
  delegate_to: localhost
  copy:
    dest: "{{ k8s_user_config_path }}"
    content: "{{ lookup('template', 'kube_config.yml') }}"
    mode: 0600
  vars:
    k8s_server: "{{ k8s_config.clusters.0.cluster['server'] }}"
    k8s_ca_cert: "{{ k8s_config.clusters.0.cluster['certificate-authority-data'] }}"
    k8s_client_token: "{{ token_secret.resources[0].data.token | b64decode }}"

- name: Check forbidden
  delegate_to: localhost
  k8s_info:
    kubeconfig: "{{ k8s_user_config_path }}"
    kind: Node
  register: this
  failed_when: "'403' not in this.msg"

- name: Check success
  delegate_to: localhost
  k8s:
    kubeconfig: "{{ k8s_user_config_path }}"
    state: present
    kind: namespace
    name: "{{ k8s_namespace }}"